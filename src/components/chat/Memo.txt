//커뮤니케이션 플랫폼: 프리랜서와 클라이언트 간의 메시지, 미팅, 파일 공유를 지원
//----------------------------------------------------------------------------------------//
# help functions
1. is_room_participant
select exists (
  select 1
  from room_participants rp
  where rp.room_id = is_room_participant.room_id
  and rp.user_id = is_room_participant.user_id
)
-> rp.room_id = is_room_participant.room_id and rp.user_id = is_room_participant.user_id 조건 불충족시 return false

2. insert_creator_into_room (trigger f)
begin
  insert into room_participants(room_id, user_id)
  values(new.id, auth.uid());

  return new;
end;

3. create_room (rpc 함수: 2번이랑 트리거 대신)


//----------------------------------------------------------------------------------------//
# Queries
1. Check if a user is a participant in a room
2. rpc용 쿼리

  declare
    v_room rooms;
  begin
    insert into rooms(roomname)
    values(create_room.roomname)
    returning * into v_room;

    insert into room_participants(room_id, user_id)
    values(v_room.room_id, auth.uid());

    return v_room;
  end;


//----------------------------------------------------------------------------------------//
#Policy
1. rooms
2. room_participants

//----------------------------------------------------------------------------------------//
#순서
(1) 페이지 분리 전
1. rooms 테이블 -> room_participants 테이블 세팅 -> help function -> 쿼리로 f 테스트 -> rooms policy, room_participants policy
2. trigger f 생성 (room_participants 테이블에 room_id, user_id 삽입) -> trigger 생성 (on_room_created) : 실행 순서는 트리거 먼저

3. 2번 지우고 -> 새로운 rpc 함수 생성(쿼리 대체?) -> 쿼리로 확인 -> rooms policy에 insert 삭제 (함수로만 가능하도록)

(2) 페이지 분리 후
1. messages 테이블에 room_id 컬럼 생성
2. messages 테이블 room_id notnull로 설정 -> policy 변경